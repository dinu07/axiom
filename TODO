 - distribution
  - rework the installation script (or produce a proper package install)
 - roadmap
  - complete the 'scenario' API and DSL
  - integrate surefire as the default reporting output 
  - provide hooks (API) for alternate reporting output
  - provide better support for build integration (certainly maven, possibly ant!?)  
 - axiom-core
  - set up the control channel (class) to puke on method invocations when in an invalid state
  - align the terminology in the model to the naming convention in the channels
   - (e.g., use either 'shutdown' or 'terminate' but not a different combination of both) 
  - deal with route/rule specifications coming in off the wire
   - write xlst for xml2code
    - think about whether transformations should go the other way!?
  - think about whether route/rule data should be transient or persistent
   - discover whether (or not) camel route related objects can easily be accessed and/or serialized
    - if they are (both easy to access/find in the runtime object graph
     - if they can be serialized without much hassle - we should put this in for completeness
     - otherwise it is a prioritization that doesn' need to take place in the first few weeks of Beta.
 - add an 'axiom-client' project
   - decide on how
    - a jar and Main.java that just wrap around a jruby script is probably the most consistent approach
   - just talk to the server using http
   - convert commands into either camel objects for serialization, or by hand
 - misc
  - move direct junit4 dependencies out of the poms
  - get either the cobertura or emma plugins working (they currently seem to break the build)
  - set up profiles so you can build and package (for distribution) individual components
  - start writing some documentation on github/wiki
 