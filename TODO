
* - create an ExternalizedConfigurationSource that reads the default properties and system properties in
*   - see http://commons.apache.org/configuration/apidocs/index.html for details
* - make the above class search for additional configuration sources in the axiom.configuration.paths=list:of:paths and load them
* - embed the ExternalizedConfigurationSource in the spring application context  
* - declare a Configuration bean which is made by calling the factory method in the above source/factory bean/class
* - write a BootstrapRouteLoader class (in java) which loads configuration (using the above) and creates a route builder
 - write a ControlChannel class (in java) which takes a route loader and starts up the control channel
* - write a ContextConfigurationEndpoint (or similar) and have this exposed in the bootstrap.rb routes
*   - this will allow us to configure multiple camel contexts per jvm
*   - this will (also) allow us to host camel contexts elsewhere and route instructions to them via and exchange over the network*
 - pull out a parent pom.xml and move the current sources into project 'axiom', integration tests into 'axiom-integration-test'
 - add an 'axiom-server' child project and in it:
   - create a default entry point so the jar is executable
   - wire the main method with commons-cli so that argument handling is well tested
   - have the main method work out the args and start a ControlChannel using a BootstrapRouteLoader
   - write an axiom mojo so you can run `mvn axiom:deploy axiom:run`
 

 * routing configuration upgrades to external (jvm) contexts

 # in the axiom routing send the control channel messages over the wire 
 
 route {
   from(config >> 'axiom.control.channel.commands').
   to('jms:configUpgradesTopic?concurrentConsumers=1')
 }

 # on another node, listen for these and use embedded axiom to maintain your routes at runtime

 route {
   from('jms:configUpgradesTopic').to('axiom:configuration-manager')i
   # or
   from('jms:configUpgradesTopic').to('bean:axiom-configuration-manager/update')
 }

